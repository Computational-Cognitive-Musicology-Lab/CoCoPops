organizedSongs
organizedSongs |> filter(PrimaryAristID == artistID)
library(httr)
library(rvest)
library(dplyr)
knitr::opts_chunk$set(comment = '')
natstoken <-  "K4-s0xi0i81-q-1QymSVIfiq36FMOck91sSDwnuBDCblkC9OlaFp9K9OSMMr4dAZ"
searchArtist <- function(artist) {
# 1.
response <- GET("https://api.genius.com/search",  query = list(q = artist, access_token = natstoken))
# 2.
didAPIcallwork(response)
## this will throw an error if it didn't work
hits <- content(response)$response$hits
# 3.
artists <- lapply(hits, parseSongArtist) |> unique()
# 4.
n_hits <- length(artists)
if (n_hits == 0) return(noArtists(artist))
if (n_hits > 1L) {
pickArtistHit(artists, targetArtist = artist)
} else {
artists[[1]]
}
}
didAPIcallwork <- function(response) if (response$stat != 200) stop(response$header, "Something is wrong with the API call!")
parseSongArtist <- function(hit) {
artistInfo <- hit$result$primary_artist
tibble(Artist = artistInfo$name,
ArtistID = artistInfo$id,
ArtistURL = artistInfo$url,
ArtistPhoto = artistInfo$header_image_url)
}
noArtists <- function(artist) stop("The search", artist, "returned no results.")
pickArtistHit <- function(artists, targetArtist) {
# matchesTarget <- c()
# for (i in 1:length(artists)) {
#     matchesTarget <- c(matchesTarget, artists[[i]]$Artist == targetArtist)
# }
matchesTarget <- sapply(artists, \(artist) artist$Artist[1] == targetArtist)
artists[[which(matchesTarget)[1]]]
}
searchArtist('Biggie Smalls')$ArtistPhoto |> knitr::include_graphics()
searchArtists <- function(artists) {
searchedArtists <- lapply(unique(artists), searchArtist)
do.call('rbind', searchedArtists) # this command puts the tables together by row
}
searchArtists(c('JAY-Z', 'Tyler the Creator', 'Missy Elliott'))
getArtistSongs <- function(artistID) {
songs <- querySongs(artistID)
parsedSongs <- lapply(songs, parseSong)
organizedSongs <- organizeSongs(artistID, parsedSongs)
filterSongs(artistID, organizedSongs)
}
querySongs <- function(artistID) {
artistEndpoint <-  paste0("https://api.genius.com/artists/", artistID, "/songs")
songs <- list()
page <- 1
while(TRUE) {
print(page)
response <- GET(artistEndpoint,
query = list(access_token = natstoken,
sort = 'popularity',
per_page = 50,
page = page))
didAPIcallwork(response)
response <- content(response)$response
if (length(response$next_page)) {
songs <- c(songs, response$songs)
page <- response$next_page
} else {
break
}
}
songs
}
parseSong <- function(song) {
tibble(Song = song$title,
SongID = song$id,
PrimaryAristID = song$primary_artist$id,
# SongReleaseDate = song$release_date_for_display,
SongLyricsState = song$lyrics_state,
SongURL = song$url)
}
organizeSongs <- function(artistID, parsedSongs) {
songTable <- do.call('rbind', parsedSongs)
songTable$ArtistID <- artistID
songTable
}
filterSongs <- function(artistID, organizedSongs) {
organizedSongs |> filter(PrimaryAristID == artistID)
}
biggie <- searchArtists('Biggie Smalls')
getArtistSongs(biggie$ArtistID[[1]]) -> biggiesongs
songs
biggiesongs
biggiesongs$PrimaryAristID
7*35
fread('~/Bridge/GATech/GradProgram/Admissions/2024_2_Fall.csv')
app <- fread('~/Bridge/GATech/GradProgram/Admissions/2024_2_Fall.csv')
app
names(app)
app[, table(Lerch, CCML, Jason, Smith, L4DI, Gil)]
app[, table(Lerch, CCML, Jason, Smith, L42I, Gil)]
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil)]
app$Lerch
app <- fread('~/Bridge/GATech/GradProgram/Admissions/2024_2_Fall.csv')
app$Lerch
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> colSums(na.rm=T)]
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor(())]
app
app[is.na(app)] <- 0
app
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> colSums(na.rm=T)]
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor(())]
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor()]
app[, cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor() |> as.dist()]
names(app)
app[Program == 'MSMT', cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor() |> as.dist()]
app[Program == 'PhdMT', cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor() |> as.dist()]
app$Program
app[Program == 'PhDMT', cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> cor() |> as.dist()]
app[Program == 'MSMT', cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> colSums(na.rm=T)]
app[Program == 'PhDMT', cbind(Lerch, CCML, Jason, Smith, L42I, Gil) |> colSums(na.rm=T)]
app[Program == 'MSMT', (cbind(Lerch, CCML, Jason, Smith, L42I, Gil) > 0) |> colSums(na.rm=T)]
app[Program == 'PhDMT', (cbind(Lerch, CCML, Jason, Smith, L42I, Gil) > 0) |> colSums(na.rm=T)]
MSMT
app[Program == 'MSMT', (cbind(Lerch, CCML, Jason, Smith, L42I, Gil) > 0) |> colSums(na.rm=T)]
app[, (cbind(Lerch, CCML, Jason, Smith, L42I, Gil)  > 0 )|> cor() |> as.dist()]
app$Bprogram
app$Bprogram |> table()
app$Bprogram |> table() |> sort9
app$Bprogram |> table() |> sort()
app <- fread('~/Bridge/GATech/GradProgram/Admissions/2024_2_Fall.csv')
app[is.na(app)] <- 0
app$Bprogram |> table() |> sort()
app$Binstitution |> table() |> sort()
app$Binstitution |> sort() |> cat(sep = '\n')
app$Binstitution |> sort() |> unique() |> cat(sep = '\n')
names(app)
app[ ,table(Country)]
app[ ,table(Program, Country)]
app$V2
app[, Program := ifelse(app$V2 == 'Yes', 'MSMT', Program )]
app[ ,table(Program, Country)]
app[ ,table(Gender, Country)]
app[ ,table(Gender, Country)] -> k
k[1,]/k[,2]
k[1,]/k[2,]
k[2,]/k[1,]
app[ ,table(Gender, Country)]
app[ ,table(Gender, Program)]
response <- GET("https://api.genius.com/search",  query = list(q = "Missy Elliott", access_token = natstoken))
library(httr)
library(rvest)
library(dplyr)
knitr::opts_chunk$set(comment = '')
natstoken <-  "K4-s0xi0i81-q-1QymSVIfiq36FMOck91sSDwnuBDCblkC9OlaFp9K9OSMMr4dAZ"
response <- GET("https://api.genius.com/search",  query = list(q = "Missy Elliott", access_token = natstoken))
response
response
content(response)
hits <- content(response)$response$hits
hits
length(hits)
hits
searchArtist <- function(artist) {
# 1.
response <- GET("https://api.genius.com/search",  query = list(q = artist, access_token = natstoken))
# 2.
didAPIcallwork(response)
## this will throw an error if it didn't work
hits <- content(response)$response$hits
# 3.
artists <- lapply(hits, parseSongArtist) |> unique()
# 4.
n_hits <- length(artists)
if (n_hits == 0) return(noArtists(artist))
if (n_hits > 1L) {
pickArtistHit(artists, targetArtist = artist)
} else {
artists[[1]]
}
}
didAPIcallwork <- function(response) if (response$stat != 200) stop(response$header, "Something is wrong with the API call!")
parseSongArtist <- function(hit) {
artistInfo <- hit$result$primary_artist
tibble(Artist = artistInfo$name,
ArtistID = artistInfo$id,
ArtistURL = artistInfo$url,
ArtistPhoto = artistInfo$header_image_url)
}
noArtists <- function(artist) stop("The search", artist, "returned no results.")
pickArtistHit <- function(artists, targetArtist) {
# matchesTarget <- c()
# for (i in 1:length(artists)) {
#     matchesTarget <- c(matchesTarget, artists[[i]]$Artist == targetArtist)
# }
matchesTarget <- sapply(artists, \(artist) artist$Artist[1] == targetArtist)
artists[[which(matchesTarget)[1]]]
}
searchArtist('Missy Elliott')
searchArtist('Missy Elliot')
searchArtist('Missy Elli')
searchArtist('Missy Elliott')
searchArtist('Missy Elli')
library(tuneR)
library(stats)
library(gsignal)
synth <- function(fs) {
dft <- numeric(sr - 1)
amp <- fs / min(fs)
dft[fs] <- 1 / amp
showspec(dft)
invdft(dft)
}
dft <- function(signal) {
dft <- fft(signal)[-1] / (length(signal) / 2)
class(dft) <- 'dft'
dft
}
print.dft <- function(x, ...) showspec(x, ...)
invdft <- function(dft) fft(c(1, dft * (sr / 2)), inverse = TRUE) |> Re()
spec0 <- rep(0, 44100)
s1 <- s2 <- spec0
showspec <- function(spec, max = 1500, ...) spec |> abs() |> head(max) |> plot(type='l',...)
aswav <- function(spec) spec |> fft(inverse = TRUE) |> Re() |> Wave() |> normalize(unit = '16')
playspec <- function(spec) spec |> aswav() |> play(player='/usr/bin/cvlc')
playsound <- function(x) Re(x) |> Wave() |> normalize(unit = '16') |> play(player='/usr/bin/cvlc')
notei <- (88247 - 44099):88247
readWave('~/Desktop/guitar.wav')@left[notei] -> guitar
readWave('~/Desktop/bass.wav')@left[notei] -> bass
#
sr <- 92e3
sine <- function(fs) {
t <- seq(0, 1 - (1/sr), length.out = sr)
lapply(fs,
\(f) {
sinpi(t * f *2)
}) |> do.call(what = 'cbind') -> sines
rowSums(sweep(sines, 2, min(fs) / fs, '*'))
}
f.A <- 200 * (1:128)
f.B <- 240 * (1:128)
A <- sine(f.A) #+ runif(sr)
B <- sine(f.B) #+ runif(sr)
plot(A[1:10000], type ='l')
f.A <- 200 * (1:32)
f.B <- 240 * (1:32)
A <- sine(f.A) #+ runif(sr)
B <- sine(f.B) #+ runif(sr)
plot(A[1:10000], type ='l')
intersect(f.A, f.B)
fft(A) |> showspec()
fft(B) |> showspec()
fft(A +B) |> showspec()
fft(B) |> showspec()
fft(A) |> showspec()
cohere <- function(a, b, scale = TRUE, s = 'unbiased') {
cross <- with(xcorr(a, b, scale = s), R[lags > 0])
cross <- dft(cross) #/ length(cross)
if (scale) {
ax <- dft(with(xcorr(a, a, scale = s), R[lags > 0]))
bx <- dft(with(xcorr(b, b, scale = s), R[lags > 0]))
cross <-  (abs(cross)^2) / (ax  * bx)
}
cross
}
cohere(A,B,scale=F) |> showspec()
cohere(A,B,scale=F, s='none') |> showspec()
cohere(A,B,scale=F, s='none') |> showspec(5000)
intersect(f.A, f.B)
cohere(A,B,scale=F, s='none') |> showspec(7000)
showspec(fft(A+B))
showspec(fft(A+B), 6000)
showspec <- function(spec, max = 600, ...) spec |> abs() |> head(max) |> plot(type='l',...)
showspec <- function(spec, max = 6000, ...) spec |> abs() |> head(max) |> plot(type='l',...)
fft(A + B) |> showspec()
intersect(f.A, f.B)
cohere(A,B) |> showspec()
cohere(A,B, s = 'none') |> showspec()
cohere(A,B, s = 'none', scale=T) |> showspec()
cohere(A,B, s = 'none', scale=F) |> showspec()
cohere(A,B, s = 'none', scale=T) |> showspec()
cohere(A,B, s = 'none', scale=F) |> showspec()
cohere <- function(a, b, scale = TRUE, s = 'none') {
cross <- with(xcorr(a, b, scale = s), R[lags > 0])
cross <- dft(cross) #/ length(cross)
if (scale) {
ax <- dft(with(xcorr(a, a, scale = s), R[lags > 0]))
bx <- dft(with(xcorr(b, b, scale = s), R[lags > 0]))
cross <-  (abs(cross)^2) / (ax  * bx)
}
cross
}
cohere(A,B) |> showspec()
cohere(A,B,s='unbiased') |> showspec()
cohere(A,B,s='biased') |> showspec()
cohere(A,B,s='unbiased') |> showspec()
cohere(A,B,s='biased') |> showspec()
cohere(A,B,s='unbiased') |> showspec()
mscohere(cbind(A,B))
mscohere(cbind(A,B)) |> showspec()
with(mscohere(cbind(A,B), fs = sr, nfft = 20000, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
with(mscohere(cbind(A,B), fs = sr, nfft = 20000, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
f.A <- 200 * (1:32)
f.B <- 210 * (1:32)
intersect(f.A, f.B)
with(mscohere(cbind(A,B), fs = sr, nfft = 20000, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
cohere(A,B) |> showspec()
f.A <- 200 * (1:32)
f.B <- 210 * (1:32)
A <- sine(f.A) #+ runif(sr)
B <- sine(f.B) #+ runif(sr)
intersect(f.A, f.B)
cohere(A,B) |> showspec()
with(mscohere(cbind(A,B), fs = sr, nfft = 20000, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
with(mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0)$freq
mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0)$freq |> max()
mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0)$freq |> length()
length(dft(A+B))
((dft(A+B)[1:46001]) * (mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0)$coh)) |> showspec()
((dft(A+B)[1:46001]) * (1-mscohere(cbind(A,B), fs = sr, nfft = sr, overlap = 0)$coh)) |> showspec()
dft(A)
dft(A) |> length(A)
dft(A) |> length()
cohere(A,B)
cohere(A,B) |> length()
cohere(A,B) |> abs()
cohere(A,B)[-1] |> abs()
dft(A) * (cohere(A,B)[-1] |> abs())
dft(A+B) * (cohere(A,B)[-1] |> abs())
dft(A) * (1-cohere(A,B)[-1] |> abs())
dft(A) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(A+B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
f.A <- 200 * (1:32)
f.B <- 240 * (1:32)
A <- sine(f.A) #+ runif(sr)
B <- sine(f.B) #+ runif(sr)
intersect(f.A, f.B)
Z <- sine(intersect(f.A, f.B))
dft(B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(A+B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(A+B)
dft(A+B) * (1-cohere(A,B,s='unbiased')[-1] |> abs())
dft(A+B) * (cohere(A,B,s='unbiased')[-1] |> abs())
dft(A+B) * (cohere(A,B,s='none')[-1] |> abs())
dft(A+B) * (1-cohere(A,B,s='none')[-1] |> abs())
dft(A+B) * (cohere(A,B,s='none')[-1] |> abs())
dft(A+B) * (1-cohere(A,B,s='none')[-1] |> abs())
dft(A) * (1-cohere(A,B,s='none')[-1] |> abs())
dft(B) * (1-cohere(A,B,s='none')[-1] |> abs())
notei <- (88247 - 44099):88247
guitar <- readWave('~/Desktop/guitar.wav')@left[notei] ->
bass <- readWave('~/Desktop/bass.wav')@left[notei]
guitar <- readWave('~/Desktop/guitar.wav')@left[notei]
bass <- readWave('~/Desktop/bass.wav')@left[notei]
dft(guitar)
dft(bass)
dft(bass + bass)
dft(bass + guitar)
cohere(guitar, bass) |> showspec()
cohere(guitar, bass, scale='unbiased') |> showspec()
cohere(guitar, bass, s='unbiased') |> showspec()
cohere(guitar, bass, scale=F) |> showspec()
cohere(guitar, bass, scale=F, s= 'none') |> showspec()
cohere(guitar, bass) |> showspec()
with(mscohere(cbind(guitar,bass), fs = sr, nfft = sr, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
##
sr <- 44100
notei <- (88247 - 44099):88247
guitar <- readWave('~/Desktop/guitar.wav')@left[notei]
bass <- readWave('~/Desktop/bass.wav')@left[notei]
cohere(guitar, bass) |> showspec()
with(mscohere(cbind(guitar,bass), fs = sr, nfft = sr, overlap = 0),
plot(freq, coh, type ='l',xlim = c(0,6000), ylim = c(0,1)))
dft(A) * (1-cohere(A,B, s = 'none')[-1] |> abs())
dft(guitar) * (1-cohere(guitar, bass, s = 'none')[-1] |> abs())
dft(guitar)
dft(guitar) * (1-cohere(guitar, bass, s = 'none')[-1] |> abs())
dft(guitar)
dft(guitar) * (1-cohere(guitar, bass, s = 'none')[-1] |> abs())
dft(bass)
dft(bass) * (1-cohere(guitar, bass, s = 'none')[-1] |> abs())
850/700
* 515
1.21* 515
515 * (9/7)
library(humdrumR)
mcf <- readHumdrum('~/Bridge/Research/Data/MCFlow/MCFlow/Humdrum/.*rap')
mcf[[ , c(1, 2, 6)]] |>
cleave(c('recip', 'stress', 'ipa')) |>
filter(Bar > 0)  -> mcf
mcf |> select(Stress) |> # stress doesn't include rests
within(StressSyl = ioi(Token, onsets = Stress == '1')) -> mcf
mcf
## duration of each note in 32nd notes and milliseconds, and timeline in 32nd notes
mcf |>
select(Token) |>
within(Dur32 = duration(., unit = '32'),
SDur32 = duration(StressSyl, unit = '32'),
DurMs = ms(., BPM = BPM),
SDurMs = ms(StressSyl, BPM = BPM),
Timeline32 = timeline(.) * 32) -> mcf
mcf
print(mcf,'tabkle')
print(mcf,'table')
print(mcf,'table', dataTypes = 'D')
### Remove all BARS that CONTAIN triplets
mcf |> select(Timeline32) |>
group_by(Piece, Bar) |>
filter(!any((Timeline32 %% 1) > 0 )) |>
ungroup() -> mcf
### Remove rests
mcf |> filter(Ipa != 'R') -> mcf
mcf
mcf |> filter(Dur32 == 4) |> draw(DurMs)
mcf |> filter(Dur32 == 4) |> with(draw(DurMs))
mcf |> filter(Dur32 == 8) |> with(draw(DurMs))
mcf |> filter(Dur32 %in% c(4,8)) |>  with(draw(DurMs, fact = Dur32 == 4))
mcf |> filter(Dur32 %in% c(4,8)) |>  with(draw(DurMs, facet = Dur32 == 4))
mcf |> filter(Dur32 %in% c(4,8)) |>  with(draw(DurMs, facet = Dur32 == 4, main ='test'))
mcf |> filter(Dur32 %in% c(4,8)) |>  with(draw(DurMs, breaks = seq(100, 1000,100),facet = Dur32 == 4, main ='test'))
mcf |> filter(Dur32 %in% c(4,8)) |>  with(draw(DurMs, breaks = seq(100, 1000,50),facet = Dur32 == 4, main ='test'))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(DurMs, breaks = seq(100, 1000,50),facet = Dur32, main ='test'))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(DurMs, breaks = seq(50, 1000,50),facet = Dur32, main ='test'))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(DurMs, breaks = seq(50, 1000,50),facet = factor(Dur32, levels=c(1,2,4,8)), main ='test'))
library(humdrumR)
# MCFlow ----
## Parse data we need
mcf <- readHumdrum('~/Bridge/Research/Data/MCFlow/MCFlow/Humdrum/.*rap')
mcf[[ , c(1, 2, 6)]] |>
cleave(c('recip', 'stress', 'ipa')) |>
filter(Bar > 0)  -> mcf
mcf[[ , c(1, 2, 6)]] |>
cleave(c('recip', 'stress', 'ipa')) |>
filter(Bar > 0)  -> mcf
filter.humdrumR
library(humdrumR)
mcf <- readHumdrum('~/Bridge/Research/Data/MCFlow/MCFlow/Humdrum/.*rap')
mcf[[ , c(1, 2, 6)]] |>
cleave(c('recip', 'stress', 'ipa')) |>
filter(Bar > 0)  -> mcf
mccf
mcf
mcf |> select(Stress) |> # stress doesn't include rests
within(StressSyl = ioi(Token, onsets = Stress == '1')) -> mcf
## duration of each note in 32nd notes and milliseconds, and timeline in 32nd notes
mcf |>
select(Token) |>
within(Dur32 = duration(., unit = '32'),
SDur32 = duration(StressSyl, unit = '32'),
DurMs = ms(., BPM = BPM),
SDurMs = ms(StressSyl, BPM = BPM),
Timeline32 = timeline(.) * 32) -> mcf
### Remove all BARS that CONTAIN triplets
mcf |> select(Timeline32) |>
group_by(Piece, Bar) |>
filter(!any((Timeline32 %% 1) > 0 )) |>
ungroup() -> mcf
### Remove rests
mcf |> filter(Ipa != 'R') -> mcf
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(DurMs, breaks = seq(50, 1000,50),facet = factor(Dur32, levels=c(1,2,4,8)), main ='test'))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(DurMs))
mc
mcf
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs)
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> class()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> unclass()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> c()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> c() |> class()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> humdrumR:::untoken()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  pull(DurMs) |> humdrumR:::untoken() |> draw()
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(humdrumR:::untoken(DurMs), facets = factor(Dur32, levels = c(1,2,4,8))))
untoken <- humdrumR:::untoken
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(untoken(DurMs), facets = factor(Dur32, levels = c(1,2,4,8))))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(untoken(DurMs), breaks =seq(25,1000,50),facets = factor(Dur32, levels = c(1,2,4,8))))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(untoken(DurMs), breaks =seq(25,1000,25),facets = factor(Dur32, levels = c(1,2,4,8))))
mcf |> filter(Dur32 %in% c(1,2,4,8)) |>  with(draw(untoken(DurMs), alpha=.75,breaks =seq(25,1000,25),facets = factor(Dur32, levels = c(1,2,4,8))))
mcf <- readHumdrum('~/Bridge/Research/Data/MCFlow/MCFlow/Humdrum/.*rap')
mcf
mcf |> wort()
mcf |> filter(Exclusive == 'lyrics') |> wort(Exclusive = FALSE, keep.sep = TRUE)
mcf |> filter(Exclusive == 'lyrics') |> wort(Token, Exclusive = FALSE, keep.sep = TRUE)
mcf |> filter(Exclusive == 'lyrics') |> wort(Token, Exclusive = NULL, keep.sep = FALSE)
mcf |> filter(Exclusive == 'lyrics') |> wort(Token, Exclusive = NULL, keep.sep = FALSE) -> mcf
mcf
mcf |> unfilter(complement = 'Token')
mcf |> pull_data.table(Filename, Record, Wort)
mcf |> filter(Spine == 7) |> pull_data.table(Filename, Record, Wort)
mcf |> filter(Spine == 7) |> pull_data.table(Filename, Record, Wort) -> a
a[, table(Wort)]
setwd("~/Bridge/Research/Data/CoCoPops/RollingStone/Resources/Scripts")
library(humdrumR)
library(humdrumR) # version 0.7.0.4
setwd("~/Bridge/Research/Data/CoCoPops/RollingStone/")
rs <- readHumdrum('Data/.*hum')
rs
rs |> harte*
rs |> harte()
harte('IV')
harte('IV', Exclusive = '**harm')
rs
