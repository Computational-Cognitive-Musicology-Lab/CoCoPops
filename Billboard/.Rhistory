}
mp3file <- gsub('Data', 'Audio', gsub('\\.[a-z.]*$', '.mp3', humfile))
rppfile <- gsub('\\..*$', '.RPP', basename(humfile))
list(HumFile = humfile, MP3File = mp3file, RPPFile = rppfile,
ReHum = rehum, Stamps = timestamps[D], Harm = harm[D])
}
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', TRUE)
if (length(newstamps) != sum(D)) stop("The number of new time stamps is off by ", length(newstamps) - sum(D))
rehum <- function(newstamps, newharm) {
if (length(newstamps) != sum(D)) stop("The number of new time stamps is off by ", length(newstamps) - sum(D))
newstamps[grepl('_X', newharm)] <- '.'
mat[D, exclusive == '**timestamp'] <- newstamps
lines[local] <- apply(mat, 1, paste, collapse = '\t')
writeLines(lines, humfile)
}
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', TRUE)
editTimeStamps <- function(humfile, fillHarm = FALSE) {
parsedHum <- extractFromHumdrum(humfile, fillHarm = fillHarm)
genRPP(parsedHum)
system(paste0('reaper ', parsedHum$RPPFile))
response <- readline(paste0('When you are done, save and close the RPP file.\n', '\tIf you want to incorporate your edits, type "save" then hit enter.\n', "\tOtherwise, just press enter.\n"))
if (response == 'save') {
new <- extractFromRPP(parsedHum$RPPFile)
if (length(parsedHum$Harm) != length(new$Harm)) {
message("Something has gone wrong, the harm tokens in the saved rpp file don't match the original ones in the humdrum file.")
} else {
parsedHum$ReHum(new$Stamps, new$Harm)
}
}
if (response != 'keep') {
rmfiles <- dir(pattern = parsedHum$RPPFile)
file.remove(rmfiles)
}
}
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', TRUE)
extractFromHumdrum <- function(humfile, fillHarm = FALSE) {
# This function pulls timestamps and harmonies out of a humdrum file,
# and returns a function that puts timestamps back IN to the same humdrum file
lines <- readLines(humfile)
local <- !grepl('^!!', lines)
lines[local] |> strsplit(split = '\t') |> stringi::stri_list2matrix() |> t() -> mat
exclusive <-  mat[1, ]
harm <- mat[ , which(exclusive == '**harm')[1]]
timestamps <- suppressWarnings(as.numeric(mat[ , exclusive == '**timestamp']))
if (fillHarm) {
D <- !grepl('^[!=*.]', harm)
missingStamp <- D & is.na(timestamps)
prev <- unlist(tapply(timestamps, cumsum(!is.na(timestamps)), \(x) rep(x[1], length(x))))
Next <- rev(unlist(tapply(rev(timestamps), cumsum(!is.na(rev(timestamps))), \(x) rep(x[1], length(x)))))
interpPos <- unlist(tapply(timestamps, paste0(prev, '.', Next), seq_along)) - 1
interpLen <- unlist(tapply(timestamps, paste0(prev, '.', Next), \(x) rep(length(x), length(x))))
interp <- ((Next - prev) / interpLen) * interpPos
timestamps[missingStamp] <- prev[missingStamp] + interp[missingStamp]
harm[missingStamp] <- paste0(harm[missingStamp], '_X')
} else {
D <- !is.na(timestamps)
}
rehum <- function(newstamps, newharm) {
if (length(newstamps) != sum(D)) stop("The number of new time stamps is off by ", length(newstamps) - sum(D))
newstamps[grepl('_X', newharm)] <- '.'
mat[D, exclusive == '**timestamp'] <- newstamps
lines[local] <- apply(mat, 1, paste, collapse = '\t')
writeLines(lines, humfile)
}
mp3file <- gsub('Data', 'Audio', gsub('\\.[a-z.]*$', '.mp3', humfile))
rppfile <- gsub('\\..*$', '.RPP', basename(humfile))
list(HumFile = humfile, MP3File = mp3file, RPPFile = rppfile,
ReHum = rehum, Stamps = timestamps[D], Harm = harm[D])
}
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', TRUE)
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', TRUE)
library(humdrumR) # using humdrumR 0.7.0.4
setwd('~/Bridge/Research/Data/CoCoPops/Billboard/')
readHumdrum('Data/^[^b].*hum') -> bb
fermata <- function(x) if (any(grepl(';', x))) rep(NA_character_, length(x)) else x
bb[[,c('**kern', '**timestamp', '**harmony')]] -> bb
bb |> group_by(File, Record) |> mutate(Token2 = fermata(Token)) |> ungroup()  -> bb
bb |>
timeline() |>
mutate(Timeline = ifelse(grepl('[qQ;]', Token2), NA, Timeline)) -> bb # make gracenotes NA
bb |>  select(Timeline, Token2) |>
group_by(Filename, Record) |>
within(Beat = unique(Timeline[!is.na(Timeline)]),
Stamp = as.numeric(Token2[Exclusive == 'timestamp']), dataTypes = 'Dd') -> time
time |> ungroup() |> index2( , 1) -> time
getTempo <- function(beat, stamp, digits= 0) {
if (sum(!is.na(stamp)) < 2) return(NA)
beat <- beat[1:max(which(!is.na(stamp)))]
beatrange <- range(beat, na.rm = TRUE)
timerange <- range(stamp, na.rm = TRUE)
if (diff(timerange) == 0 | diff(beatrange) == 0) return(NA)
mps <- diff(beatrange) / diff(timerange)
bpm <- round((mps * 4) * 60, digits)
bpm
}
getTempos <- function(beat, stamp, digits = NA) {
# this function gets one tempo PER timestamp
i <- !is.na(stamp) & !is.na(beat)
beat_diff <- tail(beat[i], -1) - head(beat[i], -1)
stamp_diff <- tail(stamp[i], -1) - head(stamp[i], -1)
mps <- beat_diff / stamp_diff # measures per second
bpm <- c(mps * 4 * 60, NA)
if (!is.na(digits)) bpm <- round(bpm, digits)
output <- rep(NA_real_, length(beat))
output[i] <- bpm
output
}
### using formal segments
uniquer <- function(x) {
x <- rle(x)
x$values <- ifelse(is.na(x$values), NA_character_, make.unique(x$values))
inverse.rle(x)
}
time |> group_by(Filename) |> within(FormSegment <- uniquer(FormalLabel)) |> ungroup() -> time
# Getting tempos
time |> group_by(Filename) |> mutate(Tempo = getTempos(Beat, Stamp, digits = 1), TempoRaw = getTempos(Beat, Stamp)) |> ungroup() -> time
### finding problems
time |> select(Tempo) |>
group_by(File, FormSegment) |>
mutate(Change = log10(Tempo / Tempo[lag = 1])) |>
ungroup()
time |> select(Tempo) |>
mutate(ChangePrev = log10(Tempo / Tempo[lag = 1]), ChangeNext = log10(Tempo/Tempo[lag = -1])) -> time
time |> group_by(Filename ) |>
mutate(Progress = Stamp / max(Stamp, na.rm = TRUE)) |>
ungroup() -> time
# time |> group_by(Filename) |>
#   summarize(Outly = {
#     progress <- Stamp / max(Stamp, na.rm = TRUE)
#     outlier <- abs(Change) > .5 & progress > .1 & progress < .9
#     if (any(outlier)) paste(Stamp[outlier], collapse = '-') else 'none'
#     }) |>
#   filter(Outly != 'none')
# time |> group_by(Filename, FormSegment) |>
# summarise(N = length(FormSegment), NStamps = sum(!is.na(Stamp)), NBars = length(unique(Bar)), Fermata = any(grepl(';', Token))) -> sections
#
# time |> group_by(Filename, FormSegment) |>
#   mutate(Accept = sum(!is.na(Stamp)) >= 2 && (length(unique(Bar)) >= 8 | (max(Stamp, na.rm = TRUE) - min(Stamp, na.rm = TRUE)) >  10)) |>
#   ungroup()|>
#   group_by(Filename) |>
#   within(FormSegment2 <- cumsum(changes(pmin(ifelse(FormSegment == 0, 1, FormSegment), max(FormSegment) - 1)) & Accept)) |> ungroup() -> time
#
# time |> group_by(Filename) |> within(FormSegment2 <- cumsum(changes(ifelse(FormSegment == 0, 1, FormSegment)) & Accept)) -> time
tempoPick <- function(tempos) {
use <- seq_along(tempos)
mean <- mean(tempos)
sd <- sd(tempos)
start <- end <- 0
while(abs((tempos[use[1]] - mean)) > 5) {
use <- use[-1]
start <- start + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
while(abs((tempos[use[length(use)]] - mean)) > 5) {
use <- head(use, -1)
end <- end + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
data.table(Tempo = mean, Start = use[1], SD = sd, Usable = length(use), StartExclude = start, EndExclude = end)
}
time |> group_by(Filename) |> summarize(tempoPick(Tempo)) -> k
cbind(rbindlist(k$`tempoPick(Tempo)`), k$Filename) -> k
setorder(k, SD)
k[!is.na(SD) & StartExclude == 0 & EndExclude== 0,]
time |> filter(Filename %~% 'WilsonPhil') |> with(draw(Stamp, Tempo))
editTimeStamps('Data/WilsonPhillips_HoldOn_1990.varms.hum', FALSE)
library(humdrumR) # using humdrumR 0.7.0.4
setwd('~/Bridge/Research/Data/CoCoPops/Billboard/')
readHumdrum('Data/^[^b].*hum') -> bb
fermata <- function(x) if (any(grepl(';', x))) rep(NA_character_, length(x)) else x
bb[[,c('**kern', '**timestamp', '**harmony')]] -> bb
bb |> group_by(File, Record) |> mutate(Token2 = fermata(Token)) |> ungroup()  -> bb
bb |>
timeline() |>
mutate(Timeline = ifelse(grepl('[qQ;]', Token2), NA, Timeline)) -> bb # make gracenotes NA
bb |>  select(Timeline, Token2) |>
group_by(Filename, Record) |>
within(Beat = unique(Timeline[!is.na(Timeline)]),
Stamp = as.numeric(Token2[Exclusive == 'timestamp']), dataTypes = 'Dd') -> time
time |> ungroup() |> index2( , 1) -> time
getTempo <- function(beat, stamp, digits= 0) {
if (sum(!is.na(stamp)) < 2) return(NA)
beat <- beat[1:max(which(!is.na(stamp)))]
beatrange <- range(beat, na.rm = TRUE)
timerange <- range(stamp, na.rm = TRUE)
if (diff(timerange) == 0 | diff(beatrange) == 0) return(NA)
mps <- diff(beatrange) / diff(timerange)
bpm <- round((mps * 4) * 60, digits)
bpm
}
getTempos <- function(beat, stamp, digits = NA) {
# this function gets one tempo PER timestamp
i <- !is.na(stamp) & !is.na(beat)
beat_diff <- tail(beat[i], -1) - head(beat[i], -1)
stamp_diff <- tail(stamp[i], -1) - head(stamp[i], -1)
mps <- beat_diff / stamp_diff # measures per second
bpm <- c(mps * 4 * 60, NA)
if (!is.na(digits)) bpm <- round(bpm, digits)
output <- rep(NA_real_, length(beat))
output[i] <- bpm
output
}
### using formal segments
uniquer <- function(x) {
x <- rle(x)
x$values <- ifelse(is.na(x$values), NA_character_, make.unique(x$values))
inverse.rle(x)
}
time |> group_by(Filename) |> within(FormSegment <- uniquer(FormalLabel)) |> ungroup() -> time
# Getting tempos
time |> group_by(Filename) |> mutate(Tempo = getTempos(Beat, Stamp, digits = 1), TempoRaw = getTempos(Beat, Stamp)) |> ungroup() -> time
### finding problems
time |> select(Tempo) |>
group_by(File, FormSegment) |>
mutate(Change = log10(Tempo / Tempo[lag = 1])) |>
ungroup()
time |> select(Tempo) |>
mutate(ChangePrev = log10(Tempo / Tempo[lag = 1]), ChangeNext = log10(Tempo/Tempo[lag = -1])) -> time
time |> group_by(Filename ) |>
mutate(Progress = Stamp / max(Stamp, na.rm = TRUE)) |>
ungroup() -> time
# time |> group_by(Filename) |>
#   summarize(Outly = {
#     progress <- Stamp / max(Stamp, na.rm = TRUE)
#     outlier <- abs(Change) > .5 & progress > .1 & progress < .9
#     if (any(outlier)) paste(Stamp[outlier], collapse = '-') else 'none'
#     }) |>
#   filter(Outly != 'none')
# time |> group_by(Filename, FormSegment) |>
# summarise(N = length(FormSegment), NStamps = sum(!is.na(Stamp)), NBars = length(unique(Bar)), Fermata = any(grepl(';', Token))) -> sections
#
# time |> group_by(Filename, FormSegment) |>
#   mutate(Accept = sum(!is.na(Stamp)) >= 2 && (length(unique(Bar)) >= 8 | (max(Stamp, na.rm = TRUE) - min(Stamp, na.rm = TRUE)) >  10)) |>
#   ungroup()|>
#   group_by(Filename) |>
#   within(FormSegment2 <- cumsum(changes(pmin(ifelse(FormSegment == 0, 1, FormSegment), max(FormSegment) - 1)) & Accept)) |> ungroup() -> time
#
# time |> group_by(Filename) |> within(FormSegment2 <- cumsum(changes(ifelse(FormSegment == 0, 1, FormSegment)) & Accept)) -> time
tempoPick <- function(tempos) {
use <- seq_along(tempos)
mean <- mean(tempos)
sd <- sd(tempos)
start <- end <- 0
while(abs((tempos[use[1]] - mean)) > 5) {
use <- use[-1]
start <- start + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
while(abs((tempos[use[length(use)]] - mean)) > 5) {
use <- head(use, -1)
end <- end + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
data.table(Tempo = mean, Start = use[1], SD = sd, Usable = length(use), StartExclude = start, EndExclude = end)
}
time |> group_by(Filename) |> summarize(tempoPick(Tempo)) -> k
cbind(rbindlist(k$`tempoPick(Tempo)`), k$Filename) -> k
setorder(k, SD)
k[!is.na(SD) & StartExclude == 0 & EndExclude== 0,]
time |> filter(Filename %~% 'WilsonPhil') |> with(draw(Stamp, Tempo))
k[!is.na(SD) & StartExclude == 0 & EndExclude== 0,]
k[is.na(SD)]
time |> filter(Filename %~% 'GoinDown') |> with(draw(Stamp, Tempo))
time |> filter(Filename %~% 'GoinDown') |> with(draw(Stamp, Tempo))
editTimeStamps('Data/BruceSpringsteen_ImGoinDown_1985.hum', FALSE)
library(humdrumR) # using humdrumR 0.7.0.4
setwd('~/Bridge/Research/Data/CoCoPops/Billboard/')
readHumdrum('Data/^[^b].*hum') -> bb
fermata <- function(x) if (any(grepl(';', x))) rep(NA_character_, length(x)) else x
bb[[,c('**kern', '**timestamp', '**harmony')]] -> bb
bb |> group_by(File, Record) |> mutate(Token2 = fermata(Token)) |> ungroup()  -> bb
bb |>
timeline() |>
mutate(Timeline = ifelse(grepl('[qQ;]', Token2), NA, Timeline)) -> bb # make gracenotes NA
bb |>  select(Timeline, Token2) |>
group_by(Filename, Record) |>
within(Beat = unique(Timeline[!is.na(Timeline)]),
Stamp = as.numeric(Token2[Exclusive == 'timestamp']), dataTypes = 'Dd') -> time
time |> ungroup() |> index2( , 1) -> time
getTempo <- function(beat, stamp, digits= 0) {
if (sum(!is.na(stamp)) < 2) return(NA)
beat <- beat[1:max(which(!is.na(stamp)))]
beatrange <- range(beat, na.rm = TRUE)
timerange <- range(stamp, na.rm = TRUE)
if (diff(timerange) == 0 | diff(beatrange) == 0) return(NA)
mps <- diff(beatrange) / diff(timerange)
bpm <- round((mps * 4) * 60, digits)
bpm
}
getTempos <- function(beat, stamp, digits = NA) {
# this function gets one tempo PER timestamp
i <- !is.na(stamp) & !is.na(beat)
beat_diff <- tail(beat[i], -1) - head(beat[i], -1)
stamp_diff <- tail(stamp[i], -1) - head(stamp[i], -1)
mps <- beat_diff / stamp_diff # measures per second
bpm <- c(mps * 4 * 60, NA)
if (!is.na(digits)) bpm <- round(bpm, digits)
output <- rep(NA_real_, length(beat))
output[i] <- bpm
output
}
### using formal segments
uniquer <- function(x) {
x <- rle(x)
x$values <- ifelse(is.na(x$values), NA_character_, make.unique(x$values))
inverse.rle(x)
}
time |> group_by(Filename) |> within(FormSegment <- uniquer(FormalLabel)) |> ungroup() -> time
# Getting tempos
time |> group_by(Filename) |> mutate(Tempo = getTempos(Beat, Stamp, digits = 1), TempoRaw = getTempos(Beat, Stamp)) |> ungroup() -> time
### finding problems
time |> select(Tempo) |>
group_by(File, FormSegment) |>
mutate(Change = log10(Tempo / Tempo[lag = 1])) |>
ungroup()
time |> select(Tempo) |>
mutate(ChangePrev = log10(Tempo / Tempo[lag = 1]), ChangeNext = log10(Tempo/Tempo[lag = -1])) -> time
time |> group_by(Filename ) |>
mutate(Progress = Stamp / max(Stamp, na.rm = TRUE)) |>
ungroup() -> time
# time |> group_by(Filename) |>
#   summarize(Outly = {
#     progress <- Stamp / max(Stamp, na.rm = TRUE)
#     outlier <- abs(Change) > .5 & progress > .1 & progress < .9
#     if (any(outlier)) paste(Stamp[outlier], collapse = '-') else 'none'
#     }) |>
#   filter(Outly != 'none')
# time |> group_by(Filename, FormSegment) |>
# summarise(N = length(FormSegment), NStamps = sum(!is.na(Stamp)), NBars = length(unique(Bar)), Fermata = any(grepl(';', Token))) -> sections
#
# time |> group_by(Filename, FormSegment) |>
#   mutate(Accept = sum(!is.na(Stamp)) >= 2 && (length(unique(Bar)) >= 8 | (max(Stamp, na.rm = TRUE) - min(Stamp, na.rm = TRUE)) >  10)) |>
#   ungroup()|>
#   group_by(Filename) |>
#   within(FormSegment2 <- cumsum(changes(pmin(ifelse(FormSegment == 0, 1, FormSegment), max(FormSegment) - 1)) & Accept)) |> ungroup() -> time
#
# time |> group_by(Filename) |> within(FormSegment2 <- cumsum(changes(ifelse(FormSegment == 0, 1, FormSegment)) & Accept)) -> time
tempoPick <- function(tempos) {
use <- seq_along(tempos)
mean <- mean(tempos)
sd <- sd(tempos)
start <- end <- 0
while(abs((tempos[use[1]] - mean)) > 5) {
use <- use[-1]
start <- start + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
while(abs((tempos[use[length(use)]] - mean)) > 5) {
use <- head(use, -1)
end <- end + 1
if (length(use) == 10) return(data.table(Tempo = NA, Start = NA, SD = NA, Usable = 0, StartExclude = length(tempos), EndExclude = 0))
mean <- mean(tempos[use])
sd <- sd(tempos[use])
}
data.table(Tempo = mean, Start = use[1], SD = sd, Usable = length(use), StartExclude = start, EndExclude = end)
}
time |> group_by(Filename) |> summarize(tempoPick(Tempo)) -> k
cbind(rbindlist(k$`tempoPick(Tempo)`), k$Filename) -> k
setorder(k, SD)
k[!is.na(SD) & StartExclude == 0 & EndExclude== 0,]
time |> filter(Filename %~% 'GoinDown') |> with(draw(Stamp, Tempo))
time |> filter(Filename %~% 'GoinDown') |> pull_data.table(Stamp, Tempo) -> l
l
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- c(diff(tempos), NA)
blocks <- cumsum(abs(diff) < cut)
plot(stamps, tempos, col = blocks + 1)
}
l
l[findBlocks(Tempo, Stamp)]
l[,findBlocks(Tempo, Stamp)]
l$Tempo
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- c(diff(as.numeric(tempos)), NA)
blocks <- cumsum(abs(diff) < cut)
plot(stamps, tempos, col = blocks + 1)
}
l$Tempo
l[,findBlocks(Tempo, Stamp)]
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- c(diff(as.numeric(tempos)), NA)
blocks <- cumsum(abs(diff) > cut)
plot(stamps, tempos, col = blocks + 1)
}
l[,findBlocks(Tempo, Stamp)]
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- c(NA, diff(as.numeric(tempos)))
blocks <- cumsum(abs(diff) > cut)
plot(stamps, tempos, col = blocks + 1)
}
l[,findBlocks(Tempo, Stamp)]
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- diff(as.numeric(tempos))
blocks <- c(NA, cumsum(abs(diff) > cut))
plot(stamps, tempos, col = blocks + 1)
}
l[,findBlocks(Tempo, Stamp)]
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- diff(as.numeric(tempos))
blocks <- c(0, cumsum(abs(diff) > cut))
plot(stamps, tempos, col = blocks + 1)
}
l[,findBlocks(Tempo, Stamp)]
l[,findBlocks(Tempo, Stamp, cut=2)]
findBlocks <- function(tempos, stamps, cut = 1) {
diff <- diff(as.numeric(tempos))
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist()
lens <- tapply(tempos, blocks, length) |> unlist()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
data.table(Means = means, Lengths = Lengths, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
findBlocks <- function(tempos, stamps, cut = 1) {
tempos <-as.numeric(tempos)
diff <- diff(tempos)
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist()
lens <- tapply(tempos, blocks, length) |> unlist()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
data.table(Means = means, Lengths = Lengths, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
findBlocks <- function(tempos, stamps, cut = 1) {
tempos <-as.numeric(tempos)
diff <- diff(tempos)
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist()
lens <- tapply(tempos, blocks, length) |> unlist()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
data.table(Means = means, Lengths = lens, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
findBlocks <- function(tempos, stamps, cut = 1) {
tempos <-as.numeric(tempos)
diff <- diff(tempos)
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist()
lens <- tapply(tempos, blocks, length) |> unlist()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
browser()
data.table(Means = means, Lengths = lens, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
means
dim(means)
findBlocks <- function(tempos, stamps, cut = 1) {
tempos <-as.numeric(tempos)
diff <- diff(tempos)
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist() |> c()
lens <- tapply(tempos, blocks, length) |> unlist() |> c()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
data.table(Means = means, Lengths = lens, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
findBlocks <- function(tempos, stamps, cut = 1) {
tempos <-as.numeric(tempos)
diff <- diff(tempos)
blocks <- c(0, cumsum(abs(diff) > cut))
means <- tapply(tempos, blocks, mean) |> unlist() |> c()
lens <- tapply(tempos, blocks, length) |> unlist() |> c()
resid <- tempos - rep(means, lens)
sd <- sqrt(sum(resid^2))
meanDIFF <- diff(means) / sd
data.table(Means = means, SD = sd, Lengths = lens, N = length(unique(blocks)), Change = c(diff(means), NA), StdChange = c(meanDIFF, NA))
}
l[,findBlocks(Tempo, Stamp, cut=2)]
time |> group_by(File) |> summarize(findBlocks(Tempo, Stamp, cut = 1))
time |> group_by(File) |>
summarize(Blocks = findBlocks(Tempo, Stamp, cut = 1)) |>
with(Map(cbind, Blocks, File))
time |> group_by(File) |>
summarize(Blocks = findBlocks(Tempo, Stamp, cut = 1)) |>
with(Map(cbind, Blocks, File)) |>
rbindlist()
time |> group_by(File) |>
summarize(Blocks = findBlocks(Tempo, Stamp, cut = 1)) |>
with(Map(cbind, Blocks, File)) |>
rbindlist() -> blocks
blocks
blocks[,hist(Change)]
blocks[,draw(Change)]
blocks[,draw(,Change)]
blocks[,Change > 100]
blocks[Change > 100]
blocks[File == 2]
blocks[V2 == 2]
blocks[Change > 100]
blocks[V2 == 4]
time |> index(4) |> with(draw(Stamp, Tempo))
time[4]
